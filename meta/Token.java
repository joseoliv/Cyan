package meta;

public enum Token {

	ABSTRACT("abstract"),
	AND("&&"),
	ASSIGN("="),
	BACKQUOTE("`"),
	BITAND("&"),
	BITNOT("~"),
	BITOR("|"),
	BITOR3("|||"),
	BITXOR("~|"),
	BOOLEAN_LOWER("boolean"),
	BOOLEAN("Boolean"),
	BREAK("break"),
	BYTE_LOWER("byte"),
	BYTE("Byte"),
	BYTELITERAL("~byteConst"),
	CASE("case"),
	CAST("cast"),
	CATCH("catch"),
	CHAR_LOWER("char"),
	CHAR("Char"),
	CHARLITERAL("~charConst"),
	COLON(":"),
	COLONCOLON("::"),
	COLONRIGHTPAR(":)"),
	COMMA(","),
	COMMENT("~COMMENT"),
	CONST("const"),
	// CYANSYMBOL("~CyanSymbol"),
	DIV("/"),
	DOLLAR("$"),
	DOLLAR_RIGHTSB("$]"),
	DOT_OCTOTHORPE(".#"),
	DOT_PERCENT(".%"),
	DOT_PLUS(".+"),
	DOT_STAR(".*"),
	DOUBLE_LOWER("double"),
	DOUBLE("Double"),
	DOUBLELITERAL("~doubleConst"),
	DYN("Dyn"),
	ELSE("else"),
	END("end"),
	ENUM("enum"),
	EOF("~EOF"),
	EOLO("~EOLO"), // end of literal object
	EQ("=="),
	EQEQEQ("==="),
	EQEQGT("==>"),
	EQGT("=>"),
	EXCEPTION("exception"),
	EXTENDS("extends"),
	FALSE("false"),
	FINAL("final"),
	FINALLY("finally"),
	FLOAT_LOWER("float"),
	FLOAT("Float"),
	FLOATLITERAL("~floatConst"),
	FOR("for"),
	FUNC("func"),
	GE(">="),
	GT(">"),
	// GT_NOT_PREC_SPACE(">"),   //   '>' not preceded by space
	IDENT("~Ident"),
	IDENTCOLON("~Ident:"),
	IF("if"),
	IMMUTABLE("immutable"),
	IMPLEMENTS("implements"),
	IMPORT("import"),
	IN("in"),
	INT_LOWER("int"),
	INT("Int"),
	INTER_ID_COLON("~InterIdColon"),          // ?name:
	INTER_ID("~InterId"),                     // ?name
	INTER_DOT_ID_COLON("~InterDotIdColon"),   // ?.name:
	INTER_DOT_ID("~InterDotId"),              // ?.name
	INTER_LEFTSB("?["),
	INTLITERAL("~intConst"),
	INTERFACE("interface"),
	IT("it"),
	LE("<="),
	LEFTPAR("("),
	LEFTPARCOLON("(:"),
	LEFTCB("{"),
	LEFTSB("["),
	LEFTSB_DOT("[."),
	LEFTCHAR_SEQUENCE("~leftCharSequence"),
	LEFTRIGHTSB("[]"),
	LEFTSB_DOLLAR("$["),
	LEFTSHIFT("<.<"),
	LEG("<=>"),
	LET("let"),
	LITERALOBJECT("~literalObject"),
	   // this token is used both to strings that start
	   // with " as "hello" and to strings that start
	   // with """
	LITERALSTRING("~literalString"),
	LONG_LOWER("long"),
	LONG("Long"),
	LONGLITERAL("~longConst"),
	LT("<"),
	LT_NOT_PREC_SPACE("<"),   //   '<' not preceded by space
	MACRO_KEYWORD("~MacroKeyword"),
	METAOBJECT_ANNOTATION("~annotation"),
	MINUS("-"),
	MINUSMINUS("--"),
	MIXIN("mixin"),
	MULT("*"),
	NEQ("!="),
	NEQEQ("!=="),
    NEWLINE("~newLine"),
	NIL("Nil"),
	NOT("!"),
	NULL("null"),
	OBJECT("object"),
	OR("||"),
	ORGT("|>"),
	OUT("out"),
	OVERLOAD("overload"),
	OVERRIDE("override"),
	PACKAGE("package"),
	PERIOD("."),
	PLUS("+"),
	PLUSPLUS("++"),
	PRIVATE("private"),
	PROTECTED("protected"),
	PUBLIC("public"),
	QUESTION_MARK("?"),
	REMAINDER("%"),
	REPEAT("repeat"),
	RETURN("return"),
	RETURN_ARROW("->"),
	RETURN_FUNCTION("^"),
	RIGHTPAR(")"),
	RIGHTCB("}"),
	// RIGHTCHAR_SEQUENCE("~rightCharSequence"),
	RIGHTSB("]"),
	RIGHTDOT_SB(".]"),
	RIGHTSB_INTER("]?"),
	RIGHTCHAR_SEQUENCE("~rightSeqSymbols"),
	RIGHTSHIFT(">.>"),
	RIGHTSHIFTTHREE(">.>>"),
	SELF("self"),
	SEMICOLON(";"),
	SHARED("shared"),
	SHORT_LOWER("short"),
	SHORT("Short"),
	SHORTLITERAL("~shortConst"),
	STACKALLOC("stackalloc"),
	STRING("String"),
	SUPER("super"),
	SWITCH("switch"),
	THROW("throw"),
	TILDE_EQUAL("~="),
	TWOPERIOD(".."),
	TWOPERIODLT("..<"),
	TRUE("true"),
	TRY("try"),
	TYPEOF("typeof"),
	TYPE("type"),
	UNTIL("until"),
	VAL("val"),
	VAR("var"),
	VIRTUAL("virtual"),
	// VOID_LOWER("void"),
	// VOID("Void"),
	VOLATILE("volatile"),
	WHILE("while"),
	XOR("~||");


	Token(String name) {
		this.name = name;
	}

	@Override public String toString() {
		return name;
	}


	private String name;



}

